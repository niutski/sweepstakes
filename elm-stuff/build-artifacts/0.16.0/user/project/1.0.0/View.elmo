Elm.View = Elm.View || {};
Elm.View.make = function (_elm) {
   "use strict";
   _elm.View = _elm.View || {};
   if (_elm.View.values) return _elm.View.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var toTeam = function (maybe) {    return A2($Maybe.withDefault,{name: "",id: 0,points: 0},maybe);};
   var teamToHtml = function (team) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.span,_U.list([]),_U.list([$Html.text(function (_) {    return _.name;}(toTeam(team)))]))
              ,A2($Html.span,_U.list([]),_U.list([$Html.text($Basics.toString(function (_) {    return _.points;}(toTeam(team))))]))]));
   };
   var participantToHtml = function (participant) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.span,_U.list([]),_U.list([$Html.text(function (_) {    return _.name;}(participant))]))
              ,A2($Html.div,_U.list([]),_U.list([teamToHtml(function (_) {    return _.team;}(participant))]))]));
   };
   var view = F2(function (address,model) {    return A2($Html.div,_U.list([]),_U.list([participantToHtml(model)]));});
   return _elm.View.values = {_op: _op,view: view,participantToHtml: participantToHtml,teamToHtml: teamToHtml,toTeam: toTeam};
};